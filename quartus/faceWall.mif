-- Altera Memory Initialization File (MIF)

DEPTH = 1024;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..3FF] : 0000;  -- Default to NOP

           000 : 04E8;  -- 	LOAD   Zero
           001 : 4C83;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 4C8B;  -- 	OUT    RVELCMD
           003 : 4CB2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 40B4;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           005 : 4096;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           006 : 4C06;  -- 	OUT    LCD         ; Display batt voltage on LCD
           007 : 4803;  -- 	IN     XIO         ; XIO contains SAFETY signal
           008 : 24F7;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           009 : 1C0F;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00A : 4802;  -- 	IN     TIMER       ; We'll use the timer value to
           00B : 24F4;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00C : 3008;  -- 	SHIFT  8           ; Shift over to LED17
           00D : 4C07;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00E : 1407;  -- 	JUMP   WaitForSafety
           00F : 4802;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           010 : 24F4;  -- 	AND    Mask1
           011 : 3005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           012 : 08E6;  -- 	STORE  Temp        ; (overkill, but looks nice)
           013 : 3001;  -- 	SHIFT  1
           014 : 28E6;  -- 	OR     Temp
           015 : 4C07;  -- 	OUT    XLEDS
           016 : 4803;  -- 	IN     XIO         ; XIO contains KEYs
           017 : 24F5;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           018 : 1C0F;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           019 : 04E8;  -- 	LOAD   Zero
           01A : 4C07;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01B : 4CC3;  -- 		OUT    RESETPOS    ; reset odometry in case wheels moved after programming
           01C : 5C12;  -- 		LOADI  &B010010
           01D : 4CB2;  -- 		OUT    SONAREN     ; turn on sonars 0 and 5
           01E : 1420;  -- 		JUMP	FACEWALL		
           01F : 147C;  -- 		JUMP die
           020 : 5C01;  -- 			LOADI	1
           021 : 4084;  -- 			CALL	WaitAC
           022 : 04E8;  -- 			LOAD	ZERO
           023 : 4C83;  -- 			OUT    	LVELCMD
           024 : 4C8B;  -- 			OUT    	RVELCMD
           025 : 9DA9;  -- 			INA		1, DIST1
           026 : 9EAC;  -- 			INA		2, DIST4
           027 : 9906;  -- 			OUTA 	1, LCD
           028 : 9A05;  -- 			OUTA 	2, SSEG2
           029 : A012;  -- 			SUBA	0, 1, 2
           02A : 9804;  -- 			OUTA	0, SSEG1
           02B : 1831;  -- 			JNEG	TURNLEFT
           02C : 0504;  -- 			LOAD	FSlow
           02D : 4C83;  -- 			OUT    	LVELCMD
           02E : 0505;  -- 			LOAD	RSLOW
           02F : 4C8B;  -- 			OUT    	RVELCMD	
           030 : 1420;  -- 			JUMP	FACEWALL
           031 : 0505;  -- 			LOAD	RSlow
           032 : 4C83;  -- 			OUT    	LVELCMD
           033 : 0504;  -- 			LOAD	FSLOW
           034 : 4C8B;  -- 			OUT    	RVELCMD	
           035 : 1420;  -- 			JUMP	FACEWALL
           036 : 4055;  -- 		CALL CENTER
           037 : 3002;  -- 		Shift 2
           038 : 0851;  -- 		STORE ANGLE
           039 : 0D06;  -- 		ADD   FMid
           03A : 4C83;  -- 		OUT   lvelcmd
           03B : 04E8;  -- 		LOAD  Zero
           03C : 1051;  -- 		SUB   ANGLE
           03D : 0D06;  -- 		ADD   FMid
           03E : 4C8B;  -- 		OUT   rvelcmd		
           03F : 48C2;  -- 		IN	THETA
           040 : 4C05;  -- 		OUT SSEG2
           041 : 48C0;  -- 		IN	XPOS
           042 : 4C04;  -- 		OUT	SSEG1
           043 : 110D;  -- 		SUB FOURFEET
           044 : 1836;  -- 		JNEG LOOPDIST
           045 : 4400;  -- 		return
           046 : 4055;  -- 		CALL CENTER 
           047 : 4C04;  -- 		OUT SSEG1
           048 : 1052;  -- 		SUB TARGET
           049 : 1850;  -- 		JNEG RET
           04A : 0504;  -- 		LOAD FSlow
           04B : 4C83;  -- 		OUT lvelcmd
           04C : 04E8;  -- 		LOAD ZERO
           04D : 1104;  -- 		SUB FSlow
           04E : 4C8B;  -- 		OUT rvelcmd
           04F : 1446;  -- 		JUMP LOOPANGLE
           050 : 4400;  -- RET:	return 
           051 : 0000;  -- ANGLE:  DW  0
           052 : FFA6;  -- TARGET: DW  -90
           053 : 0002;  -- TEMP1:	DW	2	
           054 : 0000;  -- ERROR:  DW  0
           055 : 48C2;  -- 	IN     THETA       ; get the current angular position
           056 : 374C;  -- 	ADDI   -180        ; test whether facing 0-179 or 180-359
           057 : 1C5A;  -- 	JPOS   NegAngle    ; robot facing 180-360; handle that separately
           058 : 34B4;  -- 	ADDI   180         ; undo previous subtraction
           059 : 4400;  -- 	return
           05A : 374C;  -- 	ADDI   -180        ; finish conversion to negative angle:
           05B : 4400;  -- 	return				   
           05C : 4C06;  -- 	OUT    LCD         ; Good data to display for debugging
           05D : 08E6;  -- 	STORE  Temp
           05E : 3002;  -- 	SHIFT  2          ; divide by two
           05F : 0CE6;  -- 	ADD    Temp        ; add original value
           060 : 1C69;  -- 	JPOS   CapPos      ; handle +/- separately
           061 : 0C7B;  -- 	ADD    DeadZone    ; if close to 0, don't do anything
           062 : 1C71;  -- 	JPOS   NoTurn      ; (don't do anything)
           063 : 107B;  -- 	SUB    DeadZone    ; restore original value
           064 : 3464;  -- 	ADDI   100         ; check for <-100
           065 : 1C67;  -- 	JPOS   NegOK       ; it was not <-100, so carry on
           066 : 04E8;  -- 	LOAD   Zero        ; it was <-100, so clear excess
           067 : 379C;  -- 	ADDI   -100        ; undo the previous addition
           068 : 4400;  -- 	return
           069 : 107B;  -- 	SUB    DeadZone    ; if close to 0, don't do anything
           06A : 1871;  -- 	JNEG   NoTurn
           06B : 0C7B;  -- 	ADD    DeadZone    ; restore original value
           06C : 379C;  -- 	ADDI   -100
           06D : 186F;  -- 	JNEG   PosOK       ; it was not >100, so carry on
           06E : 04E8;  -- 	LOAD   Zero        ; it was >100, so clear excess
           06F : 3464;  -- 	ADDI   100         ; undo the previous subtraction
           070 : 4400;  -- 	return
           071 : 04E8;  -- 	LOAD   Zero
           072 : 4400;  -- 	return
           073 : 08E6;  -- 	STORE  Temp        ; store calculated desired velocity
           074 : 4C83;  -- 	OUT    LVELCMD
           075 : 4C04;  -- 	OUT    SSEG1       ; for debugging purposes
           076 : 04E8;  -- 	LOAD   Zero
           077 : 10E6;  -- 	SUB    Temp        ; AC = 0 - AC
           078 : 4C8B;  -- 	OUT    RVELCMD	
           079 : 4C05;  -- 	OUT    SSEG2       ; debugging
           07A : 1455;  -- 	JUMP   Center      ; repeat forever
           07B : 000A;  -- DeadZone:  DW 10       ; Actual deadzone will be /5 due to scaling above.
           07C : 04E8;  -- 	LOAD   Zero         ; Stop everything.
           07D : 4C83;  -- 	OUT    LVELCMD
           07E : 4C8B;  -- 	OUT    RVELCMD
           07F : 4CB2;  -- 	OUT    SONAREN
           080 : 0483;  -- 	LOAD   DEAD         ; An indication that we are dead
           081 : 4C05;  -- 	OUT    SSEG2
           082 : 1482;  -- 	JUMP   Forever      ; Do this forever.
           083 : DEAD;  -- DEAD: DW &HDEAD
           084 : 4C02;  -- WaitAC:		OUT		TIMER
           085 : 8420;  -- 			COPY	1, 0
           086 : 4802;  -- WACLOOP:	IN		TIMER
           087 : A001;  -- 			SUBA	0, 0, 1
           088 : 1886;  -- 			JNEG	WACLOOP
           089 : 4400;  -- 			RETURN
           08A : 4C02;  -- 	OUT    TIMER
           08B : 4802;  -- 	IN     TIMER
           08C : 4C07;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           08D : 37F6;  -- 	ADDI   -10         ; 1 second in 10Hz.
           08E : 188B;  -- 	JNEG   Wloop
           08F : 4400;  -- 	RETURN
           090 : 4C02;  -- 	OUT    TIMER
           091 : 4802;  -- 	IN     TIMER
           092 : 4C07;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           093 : 37FB;  -- 	ADDI   -5         ; 1 second in 10Hz.
           094 : 1891;  -- 	JNEG   Wloop2
           095 : 4400;  -- 	RETURN
           096 : 40AE;  -- 	CALL   GetBattLvl
           097 : 2096;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           098 : 110A;  -- 	SUB    MinBatt
           099 : 189C;  -- 	JNEG   DeadBatt
           09A : 0D0A;  -- 	ADD    MinBatt     ; get original value back
           09B : 4400;  -- 	RETURN
           09C : 04EC;  -- 	LOAD   Four
           09D : 4C0A;  -- 	OUT    BEEP        ; start beep sound
           09E : 40AE;  -- 	CALL   GetBattLvl  ; get the battery level
           09F : 4C04;  -- 	OUT    SSEG1       ; display it everywhere
           0A0 : 4C05;  -- 	OUT    SSEG2
           0A1 : 4C06;  -- 	OUT    LCD
           0A2 : 04E8;  -- 	LOAD   Zero
           0A3 : 37FF;  -- 	ADDI   -1          ; 0xFFFF
           0A4 : 4C01;  -- 	OUT    LEDS        ; all LEDs on
           0A5 : 4C07;  -- 	OUT    XLEDS
           0A6 : 408A;  -- 	CALL   Wait1       ; 1 second
           0A7 : 04E8;  -- 	Load   Zero
           0A8 : 4C0A;  -- 	OUT    BEEP        ; stop beeping
           0A9 : 04E8;  -- 	LOAD   Zero
           0AA : 4C01;  -- 	OUT    LEDS        ; LEDs off
           0AB : 4C07;  -- 	OUT    XLEDS
           0AC : 408A;  -- 	CALL   Wait1       ; 1 second
           0AD : 149C;  -- 	JUMP   DeadBatt    ; repeat forever
           0AE : 050C;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           0AF : 4C90;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           0B0 : 4C92;  -- 	OUT    I2C_RDY     ; start the communication
           0B1 : 40BC;  -- 	CALL   BlockI2C    ; wait for it to finish
           0B2 : 4891;  -- 	IN     I2C_DATA    ; get the returned data
           0B3 : 4400;  -- 	RETURN
           0B4 : 40BC;  -- 	CALL   BlockI2C    ; wait for idle
           0B5 : 050B;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           0B6 : 4C90;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           0B7 : 04E8;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           0B8 : 4C91;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           0B9 : 4C92;  -- 	OUT    I2C_RDY     ; start the communication
           0BA : 40BC;  -- 	CALL   BlockI2C    ; wait for it to finish
           0BB : 4400;  -- 	RETURN
           0BC : 04E8;  -- 	LOAD   Zero
           0BD : 08E6;  -- 	STORE  Temp        ; Used to check for timeout
           0BE : 04E6;  -- 	LOAD   Temp
           0BF : 3401;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           0C0 : 08E6;  -- 	STORE  Temp
           0C1 : 20C5;  -- 	JZERO  I2CError    ; Timeout occurred; error
           0C2 : 4892;  -- 	IN     I2C_RDY     ; Read busy signal
           0C3 : 1CBE;  -- 	JPOS   BI2CL       ; If not 0, try again
           0C4 : 4400;  -- 	RETURN             ; Else return
           0C5 : 04E8;  -- 	LOAD   Zero
           0C6 : 352C;  -- 	ADDI   &H12C       ; "I2C"
           0C7 : 4C04;  -- 	OUT    SSEG1
           0C8 : 4C05;  -- 	OUT    SSEG2       ; display error message
           0C9 : 14C5;  -- 	JUMP   I2CError
           0CA : 08DF;  -- 	STORE  UARTTemp
           0CB : 3018;  -- 	SHIFT  -8
           0CC : 37E5;  -- 	ADDI   -27   ; escape character
           0CD : 20D1;  -- 	JZERO  UEsc1
           0CE : 341B;  -- 	ADDI   27
           0CF : 4C98;  -- 	OUT    UART_DAT
           0D0 : 14D4;  -- 	JUMP   USend2
           0D1 : 341B;  -- 	ADDI   27
           0D2 : 4C98;  -- 	OUT    UART_DAT
           0D3 : 4C98;  -- 	OUT    UART_DAT
           0D4 : 04DF;  -- 	LOAD   UARTTemp
           0D5 : 24FB;  -- 	AND    LowByte
           0D6 : 37E5;  -- 	ADDI   -27   ; escape character
           0D7 : 20DB;  -- 	JZERO  UEsc2
           0D8 : 341B;  -- 	ADDI   27
           0D9 : 4C98;  -- 	OUT    UART_DAT
           0DA : 4400;  -- 	RETURN
           0DB : 341B;  -- 	ADDI   27
           0DC : 4C98;  -- 	OUT    UART_DAT
           0DD : 4C98;  -- 	OUT    UART_DAT
           0DE : 4400;  -- 	RETURN
           0DF : 0000;  -- 	UARTTemp: DW 0
           0E0 : 04E5;  -- 	LOAD   NL
           0E1 : 4C98;  -- 	OUT    UART_DAT
           0E2 : 3018;  -- 	SHIFT  -8
           0E3 : 4C98;  -- 	OUT    UART_DAT
           0E4 : 4400;  -- 	RETURN
           0E5 : 0A1B;  -- 	NL: DW &H0A1B
           0E6 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           0E7 : FFFF;  -- NegOne:   DW -1
           0E8 : 0000;  -- Zero:     DW 0
           0E9 : 0001;  -- One:      DW 1
           0EA : 0002;  -- Two:      DW 2
           0EB : 0003;  -- Three:    DW 3
           0EC : 0004;  -- Four:     DW 4
           0ED : 0005;  -- Five:     DW 5
           0EE : 0006;  -- Six:      DW 6
           0EF : 0007;  -- Seven:    DW 7
           0F0 : 0008;  -- Eight:    DW 8
           0F1 : 0009;  -- Nine:     DW 9
           0F2 : 000A;  -- Ten:      DW 10
           0F3 : 0001;  -- Mask0:    DW &B00000001
           0F4 : 0002;  -- Mask1:    DW &B00000010
           0F5 : 0004;  -- Mask2:    DW &B00000100
           0F6 : 0008;  -- Mask3:    DW &B00001000
           0F7 : 0010;  -- Mask4:    DW &B00010000
           0F8 : 0020;  -- Mask5:    DW &B00100000
           0F9 : 0040;  -- Mask6:    DW &B01000000
           0FA : 0080;  -- Mask7:    DW &B10000000
           0FB : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           0FC : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           0FD : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.05mm units
           0FE : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.05mm units
           0FF : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.05mm units
           100 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometry units
           101 : 00B4;  -- Deg180:   DW 180       ; 180
           102 : 010E;  -- Deg270:   DW 270       ; 270
           103 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           104 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           105 : FF9C;  -- RSlow:    DW -100
           106 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           107 : FEA2;  -- RMid:     DW -350
           108 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           109 : FE0C;  -- RFast:    DW -500
           10A : 0082;  -- MinBatt:  DW 130       ; 13.0V - minimum safe battery voltage
           10B : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           10C : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           10D : 0494;  -- FOURFEET: DW	1172
  END;
